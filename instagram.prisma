// database for instagram

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String        @id @default(cuid())
    email         String        @unique
    userName      String        @unique
    firstName     String
    lastName      String
    bio           String
    password      String
    posts         Post[]
    likedComments CommentLike[]
    stories       Story[]
    savedPosts    savedPost[]
    highlights    Highlight[]
    Tags          Tag[]
    storyTags     storyTag[]
    View          View[]
    StoryView     StoryView[]
}

model Post {
    id            String      @id @default(cuid())
    userId        String
    User          User        @relation(fields: [userId], references: [id])
    caption       String
    mediaUrls     String[]
    songId        String
    location      String
    status        String
    hideLikeCount Boolean
    hideComment   Boolean
    likes         PostLike[]
    comments      Comment[]
    savedPost     savedPost[]
    Tags          Tag[]
    View          View[]
}

model media {
    id       String @id @default(cuid())
    userId   String
    mediaUrl String
    type     String
}

model Comment {
    id        String        @id @default(cuid())
    userId    String
    content   String
    commentId String
    Post      Post          @relation(fields: [postId], references: [id])
    postId    String
    likes     CommentLike[]
}

model PostLike {
    id     String @id @default(cuid())
    userId String
    postId String
    Post   Post   @relation(fields: [postId], references: [id])
}

model CommentLike {
    id        String  @id @default(cuid())
    Comment   Comment @relation(fields: [commentId], references: [id])
    commentId String

    User   User   @relation(fields: [userId], references: [id])
    userId String
}

model StoryLike {
    id      String @id @default(cuid())
    userId  String
    storyId String
    Story   Story  @relation(fields: [storyId], references: [id])
}

model Story {
    id       String @id @default(cuid())
    User     User   @relation(fields: [userId], references: [id])
    userId   String
    mediaUrl String

    Highlight          Highlight?           @relation(fields: [highlightId], references: [id])
    highlightId        String?
    storiesOnHighlight storiesOnHighlight[]
    storyTags          storyTag[]
    StoryView          StoryView[]
    StoryLike          StoryLike[]
}

model storiesOnHighlight {
    storyId     String
    highlightId String
    Story       Story     @relation(fields: [storyId], references: [id])
    Highlight   Highlight @relation(fields: [highlightId], references: [id])

    @@id([storyId, highlightId])
}

model Tag {
    id     String @id @default(cuid())
    postId String
    Post   Post   @relation(fields: [postId], references: [id])
    userId String
    user   User   @relation(fields: [userId], references: [id])
}

model storyTag {
    id      String @id @default(cuid())
    userId  String
    user    User   @relation(fields: [userId], references: [id])
    storyId String
    Story   Story  @relation(fields: [storyId], references: [id])
}

model savedPost {
    id String @id @default(cuid())

    User   User   @relation(fields: [userId], references: [id])
    userId String
    Post   Post   @relation(fields: [postId], references: [id])
    postId String
}

model Highlight {
    id String @id @default(cuid())

    name               String
    User               User?                @relation(fields: [userId], references: [id])
    userId             String?
    stories            Story[]
    storiesOnHighlight storiesOnHighlight[]
}

model View {
    id     String @id @default(cuid())
    postId String
    Post   Post   @relation(fields: [postId], references: [id])
    userId String
    User   User   @relation(fields: [userId], references: [id])
}

model StoryView {
    id      String @id @default(cuid())
    storyId String
    Story   Story  @relation(fields: [storyId], references: [id])
    userId  String
    User    User   @relation(fields: [userId], references: [id])
}

// post have notes
// 
