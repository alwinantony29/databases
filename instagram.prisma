// database for instagram

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = "postgresql://apple:@localhost:5432/insta"
}

model User {
    id        String @id @default(cuid())
    email     String @unique
    userName  String @unique
    firstName String
    lastName  String
    bio       String
    password  String

    posts      Post[]
    savedPosts SavedPost[]
    postTags   PostTag[]
    postViews  PostView[]
    notes      Note[]

    comments      Comment[]
    likedComments CommentLike[]

    stories    Story[]
    highlights Highlight[]
    storyTags  storyTag[]
    storyViews StoryView[]

    followers Connection[] @relation("follower")
    following Connection[] @relation("following")
}

model Connection {
    id String @id @default(cuid())

    followerId String
    follower   User   @relation(fields: [followerId], references: [id], name: "follower")

    followingId String
    following   User   @relation(fields: [followingId], references: [id], name: "following")
}

model Post {
    id            String      @id @default(cuid())
    userId        String
    user          User        @relation(fields: [userId], references: [id])
    caption       String
    mediaUrls     String[]
    songId        String
    location      String
    status        String
    hideLikeCount Boolean
    hideComment   Boolean
    likes         PostLike[]
    comments      Comment[]
    savedPosts    SavedPost[]
    tags          PostTag[]
    postViews     PostView[]
    notes         Note[]
}

model media {
    id       String @id @default(cuid())
    userId   String
    mediaUrl String
    type     String
}

model Comment {
    id        String        @id @default(cuid())
    userId    String
    User      User          @relation(fields: [userId], references: [id])
    content   String
    commentId String
    Post      Post          @relation(fields: [postId], references: [id])
    postId    String
    likes     CommentLike[]
}

model PostLike {
    id     String @id @default(cuid())
    userId String
    postId String
    Post   Post   @relation(fields: [postId], references: [id])
}

model CommentLike {
    id        String  @id @default(cuid())
    Comment   Comment @relation(fields: [commentId], references: [id])
    commentId String

    User   User   @relation(fields: [userId], references: [id])
    userId String
}

model StoryLike {
    id      String @id @default(cuid())
    userId  String
    storyId String
    Story   Story  @relation(fields: [storyId], references: [id])
}

model Story {
    id       String @id @default(cuid())
    User     User   @relation(fields: [userId], references: [id])
    userId   String
    mediaUrl String

    Highlight          Highlight?           @relation(fields: [highlightId], references: [id])
    highlightId        String?
    storiesOnHighlight StoriesOnHighlight[]
    storyTags          storyTag[]
    StoryView          StoryView[]
    StoryLike          StoryLike[]
}

model StoriesOnHighlight {
    storyId     String
    highlightId String
    Story       Story     @relation(fields: [storyId], references: [id])
    Highlight   Highlight @relation(fields: [highlightId], references: [id])

    @@id([storyId, highlightId])
}

model PostTag {
    id     String @id @default(cuid())
    postId String
    Post   Post   @relation(fields: [postId], references: [id])
    userId String
    user   User   @relation(fields: [userId], references: [id])
}

model storyTag {
    id      String @id @default(cuid())
    userId  String
    user    User   @relation(fields: [userId], references: [id])
    storyId String
    Story   Story  @relation(fields: [storyId], references: [id])
}

model SavedPost {
    id     String @id @default(cuid())
    User   User   @relation(fields: [userId], references: [id])
    userId String
    Post   Post   @relation(fields: [postId], references: [id])
    postId String
}

model Highlight {
    id String @id @default(cuid())

    name               String
    User               User?                @relation(fields: [userId], references: [id])
    userId             String?
    stories            Story[]
    storiesOnHighlight StoriesOnHighlight[]
}

model PostView {
    id     String @id @default(cuid())
    postId String
    Post   Post   @relation(fields: [postId], references: [id])
    userId String
    User   User   @relation(fields: [userId], references: [id])
}

model StoryView {
    id      String @id @default(cuid())
    storyId String
    Story   Story  @relation(fields: [storyId], references: [id])
    userId  String
    User    User   @relation(fields: [userId], references: [id])
}

model Note {
    id     String @id @default(cuid())
    postId String
    Post   Post   @relation(fields: [postId], references: [id])
    userId String
    User   User   @relation(fields: [userId], references: [id])
    note   String
}
